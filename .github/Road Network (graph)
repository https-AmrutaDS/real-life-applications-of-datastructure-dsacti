#include <stdio.h>
#include <stdlib.h>

// Structure to represent an adjacency list node
struct AdjListNode {
    int dest; // destination city (vertex)
    struct AdjListNode* next;
};

// Structure to represent an adjacency list
struct AdjList {
    struct AdjListNode *head;  // pointer to head node of list
};

// Structure to represent a graph
struct Graph {
    int numVertices;
    struct AdjList* array;
};

// Function to create a new adjacency list node
struct AdjListNode* createNode(int dest) {
    struct AdjListNode* newNode = (struct AdjListNode*) malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*) malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;

    // Create an array of adjacency lists. Size of array is numVertices
    graph->array = (struct AdjList*) malloc(numVertices * sizeof(struct AdjList));

    // Initialize each adjacency list as empty by making head NULL
    for (int i = 0; i < numVertices; ++i) {
        graph->array[i].head = NULL;
    }

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest. A new node is added to the adjacency list of src
    struct AdjListNode* newNode = createNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since the graph is undirected, add an edge from dest to src also
    newNode = createNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to print the adjacency list representation of graph
void printGraph(struct Graph* graph) {
    for (int i = 0; i < graph->numVertices; ++i) {
        struct AdjListNode* current = graph->array[i].head;
        printf("\nRoads connected to city %d:\n", i);
        while (current) {
            printf("City %d -> ", current->dest);
            current = current->next;
        }
        printf("NULL\n");
    }
}

// Main function to demonstrate the Road Network Graph
int main() {
    int numCities = 5; // Assume we have 5 cities (vertices)

    // Create a graph of 5 cities
    struct Graph* graph = createGraph(numCities);

    // Add roads between cities (edges)
    addEdge(graph, 0, 1);  // Road between city 0 and city 1
    addEdge(graph, 0, 4);  // Road between city 0 and city 4
    addEdge(graph, 1, 2);  // Road between city 1 and city 2
    addEdge(graph, 1, 3);  // Road between city 1 and city 3
    addEdge(graph, 1, 4);  // Road between city 1 and city 4
    addEdge(graph, 2, 3);  // Road between city 2 and city 3
    addEdge(graph, 3, 4);  // Road between city 3 and city 4

    // Print the adjacency list representation of the graph
    printGraph(graph);

    return 0;
}
